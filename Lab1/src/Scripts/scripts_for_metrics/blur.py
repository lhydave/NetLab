# -*- coding: utf-8 -*-
"""4 metrics (CPU).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TX1nI_greNKWttVUdltQ_QMSg5JfCOAa
"""

import os
import sys

from time import time
import numpy as np
import cv2

def runtime(func):
    def wrapper(*args, **kwargs):
        start = time()
        res = func(*args, **kwargs)
        print(f'Function [{func.__name__}] runtime: {time()-start:.2f}')
        return res

    return wrapper


@runtime
def video_import(filename: str, numfrm: int = 0,beginfrm: int = 0) -> list:
    cap = cv2.VideoCapture(filename)
    fps = cap.get(cv2.CAP_PROP_FPS)
    dims = (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
            int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))
    frames = cap.get(cv2.CAP_PROP_FRAME_COUNT)
    print(fps, dims, frames)
    F = []
    num = 0
    cap.set(cv2.CAP_PROP_POS_FRAMES,beginfrm)
    success, frame = cap.read()
    while success:
        num += 1
        F.append(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY))
        if numfrm > 0 and num >= numfrm:
            break
        success, frame = cap.read()
    cap.release()
    print(f'Successfully import {len(F)} frames.')
    return F


def blur_fft(img: np.array, size: int = 60) -> float:
    h, w = img.shape
    ci, cj = h // 2, w // 2
    fft = np.fft.fft2(img)
    shift = np.fft.fftshift(fft)
    shift[ci - size:ci + size, cj - size:cj + size] = 0
    shift = np.fft.ifftshift(shift)
    recon = np.fft.ifft2(shift)
    magnitude = 20 * np.log(np.abs(recon))
    return np.mean(magnitude)

@runtime
def blur_level(seq: list) -> list:
    blur = []
    for frame in seq:
        blur.append(blur_fft(frame))
    return blur

def one_clip(filename,numfrm,beginfrm):
    F = video_import(filename,numfrm,beginfrm)
    blur=np.array(blur_level(F)).mean()
    return blur

def full_video(filename):
    print(filename)
    cap = cv2.VideoCapture(filename)
    frames = 7500
    GAP=100
    down_sample_ratio=20
    blur=[]
    for beginfrm in range(0,frames,GAP):
        print(beginfrm)
        F=[]
        for i in range(beginfrm,beginfrm+GAP,down_sample_ratio):
            cap.set(cv2.CAP_PROP_POS_FRAMES,i+down_sample_ratio//2)
            success, frame = cap.read()
            if success:
                F.append(blur_fft(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)))
        blur.append(np.array(F).mean())            
    cap.release()
    return blur

def blur_only(video,outfile):
  blur=full_video(video)
  with open(outfile,'w') as f:
    f.write('blur:\n')
    for i in blur:
      f.write(str(i)+'\n')

if __name__ =='__main__':
    blur_only(sys.argv[1],sys.argv[2])
